name: Deploy to aws ecs

on:
  push:
    branches: ["stg"]

env:
  AWS_REGION: ap-southeast-1
  ECR_REPOSITORY: anp-crm
  EC2_HOST: ubuntu@ec2-3-1-9-223.ap-southeast-1.compute.amazonaws.com

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # - name: Build, tag, and push image to Amazon ECR
      #   id: build-image
      #   env:
      #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      #     IMAGE_TAG: ${{ github.sha }}
      #   run: |
      #     # Build a docker container and
      #     # push it to ECR so that it can
      #     # be deployed to ECS.
      #     docker build -t $ECR_REGISTRY/${{ secrets.ECR_REPOSITORY }}:latest .
      #     docker push $ECR_REGISTRY/${{ secrets.ECR_REPOSITORY }}:latest
      #     echo "image=$ECR_REGISTRY/${{ secrets.ECR_REPOSITORY }}:latest" >> $GITHUB_OUTPUT

      - name: SSH command action
        uses: D3rHase/ssh-command-action@v0.2.2
        with:
          host: ${{ secrets.EC2_HOST }} # Remote server address / ip - required
          user: ${{ secrets.EC2_USER }} # Remote server user - required
          private_key: ${{ secrets.EC2_SSHKEY }} # Private ssh key registered on the remote server - required
          command: |
            ls -la 
            # sudo docker run -p 80:3000 -d ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY}}:latest
